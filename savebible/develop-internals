Chapter 1
1 First verse of book Geneses, 2 Second verse of the Geneses.
3 Third verse of the Geneses.
    4 Forth verse of the Geneses.

bible
    testaments = []

testament
    books = []
    type - new,old

book
    id
    name
    type - new,old,secondary
    chapters = []

chapter
    verses = []
    titles = {}

verse
    number
    content = [{index, category}]
    words = []
    punct = []
    strong = []


word
    text = ''


dictionary
    words = []
    words = {}




a1 a2 ... aN
lower(ai)

dict {
    list a[i]
    list lower(a[i], {verse[x], ... })
};

words
    orig = ''  // example: 'And', 'And,', 'And:', 'and'
               // as it is presented in the original text
    key  = ''  // lowercased, no punctation

    nopunctlower - { verse[x], ... , verse[y] }

    special = null or {Jesus = T, Prophet = P, Translator = T }



verse = {i1, i2, i3, ..., iK}

chapter
    verses = [];
        words  = [];
        punct  = [];

    titles = [];

vI \x a1a2...aN\+y b1b2....bM\+y*c1c2...cK\x*

var object = extract(text);

Range() {
    start
    end
}

Range.prototype = {
    intersect: function(range) {
        return 'intersection range'
    }

    union: function(range) {
        return 'range'
    }

    empty: function() {

    }
};

Tag() {
    this.tag = 'tag name';
    this.range
}

Verse() {
    chap = null;
    orig = 'text as it is presented in the file';
    text = [range1, range2, ... , rangeN];
    tags = [tag1,   tag2,   ... , tagK  ];
}

Verse.prototype.toText = function() {
    var result = '';
    text.forEach(function(range) {
        result += orig.substr(range.start, range.end);
    }
    return result;
}

Verse.prototype.toHTML = function() {
    var result = '';
    text.forEach(function(range) {
        result += orig.substr(range.start, range.end);
    }
    return result;
}


\jw a1a2...aN\+add b1b2....bM\+add*c1c2...cK\jw*

<p><span class="jw">a1a2...aN<span class="add">b1b2...bM</span>c1c2...cK</span></p>
Verse {
    content = [Blob];
}

attributes = ['\wj', '\+wj', '\add', '\+add', '\nd', '\+nd']

